<*
MIDITOR 1.0 By G.Symons 2012
Example Song & Specification.
To export this as a MIDI file use... MIDITOR MIDITOR.TXT MIDITOR.MID 
*>
<* Start Of Song:ICE Corps By G.S.2012 *>
	|[T(0)D(1.2)]|	<*Time signature of bar duration 1.2 seconds, 50 Bars a second. The song is scored at 2 beats a bar, 100 BPM*>        

	<[V][+7][+12]>	<*Macro defined when V is invoked after any note as in Intro a 5th and an octave is added to note*>
	<*Intro(Guitar):V macro used and full bend down over 1 bar on last note*>
	|[C(0)K(57)M(2)(C0)(1E)]| |3-|0-|--|0-|3-|2-|0-|--| |3-|0-|--|0-|3-|--|T,-|--|0V[b-1]|-|    <*Play Intro*>    

        <[B].[+35]><[S].[+38]><[C].[+49]>		<*Define drum Bass Snare & Cymbal macros with percusive notes added to rests which have a value of 0*>        
        <[SectionMDrums]|BBBS.BS.|BBBS.BS.|BBBS.C..|> 	<*Define middle section for drums*>
        <[SectionMGuitar]|0003.03.|0003.03.|0003.0..|>  <*Macro defined for middle section for guitar*>
	<[SectionEndDrums]|BBBSBBBS|BBBS.S.C|BBBSBBBS|BBBS.S.C|BBBS.C..|BBBS.C..|BBBS.S.C|BBBS.C..|BBBS.C..|BBBS.S.C|><*Macro for end drums*>
	<[SectionEndGuitar]|00080007|0008-7-5|00070005|0007-5-3|0003.0..|0003.0..|0003.5 .2|0003.0..|0003.0..|0003.T,.0|> <*Macro for end guitar*>
	
	|[S()C(9)K(105)]|	<*Main(Drums): Channel C(9) percussion S() Stores current song position, R() will then be used by parallel bars for guitar*>
        |<4X>SectionMDrums|SectionEndDrums| <*Play 4 x middle of drums followed by end for drums*>
        |[R()C(1)M(2)(C1)(1D)K(45)]| <*Main(Guitar): Restore saved song position to be at same point as beginning of drums at middle section*>
	<[PowerChord]|[S(+)]|%1|[R()K(+7)]|%1|[R(-)K(+5)]|%1|[K(-12)]|> <*%1 macro is used as an argument for power chord macro*>
	<[%1]<4X>SectionMGuitar>|PowerChord| <*Play guitar using power chord macro for 4 x middle*>
	<[%1]SectionEndGuitar>|PowerChord|   <*For end as well*>
<* End Of Song *>
<*
MIDITOR Specification 1.0 By G.Symons 2012

MIDITOR allows the fast and easy creation, ASCII editing and sorting by time, of readable multi channel MIDI data and music events.
Format is similar to guitar and drum tab, yet with high replayable accuracy.
MIDITOR has a built in macro preprocessor.

Comments are always within <* *>

Macros are defined within <[MacroName]Definition> they are invoked with their name. Optional <nX> before can invoke it n times.
Macro expansions are preprocessed thus macros within macros can be used.
Macros may be redefined, so arguments to a macro can be invoked macros within a macro definition for instance.
To undefine a macro redefine it with no definition <[MacroName]> .
Macros are prioritised by the number of characters they have in their name, the more characters, the higher priority they have, to be invoked over another.
Macros can only be defined and invoked outside of [], as everything within [] is ignored by the preprocessor.
A 3rd party language independent macro preprocessor can of course be used instead.

Character remapper <]C[R> remaps character C to R just before the preprocesser finally outputs characters.
for instance if you are not happy with using the - symbol for holds you can use another such as _ by using <]_[-> .

| Bar marker
Note elements within a bar are 0123456789TE.-
with 0 to 11(Chromatic notes) .(Rest) and -(Hold last note). They are NEVER within [].
Note elements have a bars duration split equally amongs them and are relative to the current key.
A Notes split duration is extended by - holds following it.
Example |0.0-| has 1/4 of a bars duration for each note element.
So for |0.0-| one note 0 is played for 1/4 of a bar and then after a 1/4 of a bar rest another 0 is played for 1/2 (1/4+1/4 hold) a bar.
A || is an empty bar so has 0 time whereas |.| is a bar with a rest of bar duration and is same as |..|
|2-..| is the same as |2.|, |2| is the same as |2-| which is the same as |2----------------|
this makes durations and rests very easy to edit.

Bar commands one character followed by () ALWAYS within [] directly after bar | .
If n has a + or - before value then n is added to or subtracted from current value.
T(n)		Sets songs current time offset, susbequent bars increment current time by bar duration.
D(n) 		Set duration of a bar in floating point seconds.
K(n)		Sets subsequent bars current key as a MIDI chromatic note which 0 to E are then relative to.
C(n) 		Set current channel 0-15.
S()		Save current song time. When S(+) is used the time is pushed onto a stack.
R()		Restore saved song time, used for parallel multi track rendering. When R(-) is used the time is popped of a stack.
M(n)(a)(b)(c) 	MIDI message n (2 or 3) arguments a b and/or c in hex. Used for program (patch/instrument) changes, control changes,...

 
Note adjustments with quick single letters, directly after note (if note is a . or - 0 is used). They can be outside [];
;,'" Octave adjust notes octave -2,-1,+1,+2

Note adjustments with decimal arguments ALWAYS in [].
/n \n Slide up/down relatively n notes of current duration, unlike bend distinct individual notes can be heard.
bn Bend +/- 1.0(full) over notes duration, this is affected by the bend range setting in MIDI which defaults +-2 chromatic tones (semi tones).
+n Add note relative to all following notes(0toE).
dn note duration where n is scale of bar duration.
rn rest (delay) before playing note where n is scale of bar duration .
x Cancel note, outside of [].
m(n)(a)(b)(c) 	MIDI message n (2 or 3) arguments in hex.
vn 		Press(+)/release(-) velocity.
*>


 

